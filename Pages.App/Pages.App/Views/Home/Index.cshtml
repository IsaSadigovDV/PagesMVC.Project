@model HomeVM

@{
    ViewData["Title"] = "Home Page";
}
@if (!string.IsNullOrWhiteSpace((string)TempData["Email"]))
{
    <div style="display:none;" id="emailFormat">
        @TempData["Email"]
    </div>
}
@if (!string.IsNullOrWhiteSpace((string)TempData["Register"]))
{
    <div style="display:none;" id="verifyEmail">
        @TempData["Register"]
    </div>
}
@if (!string.IsNullOrWhiteSpace((string)TempData["Verify"]))
{
    <div style="display:none;" id="successVerify">
        @TempData["Verify"]
    </div>
}
@if (!string.IsNullOrWhiteSpace((string)TempData["AdminInfo"]))
{
    <div style="display:none;" id="adminInfo">
        @TempData["AdminInfo"]
    </div>
}
<!-- welcome to pages start -->
<div class="bg-blue">
 
    <div class="nav container d-flex space-between">
        <div>
            <div class="welcome-section">
                <p class="lined"><i>Welcome</i></p>
                <h1 class="unique-text">Books are uniquely portable magic</h1>
                <p>
                    There are many variations of passages of Lorem Ipsum available,
                    but the majority have suffered alteration in some form.
                </p>
            </div>
            <div class="mar-30 d-flex align-center blue-section">
                <button class="btn">
                    <a class="blue" href="#">Order Today</a>
                </button>
                <a class="underline" href="#">Read Free Demo</a>
            </div>
            <div>
                <div class="pages-cont d-flex">
                    <div class="bulleted">
                        <h4>Pages:</h4>
                        <p class="gray">586 Pages</p>
                    </div>
                    <div class="bulleted">
                        <h4>Author:</h4>
                        <p class="gray">Arthur Conan Doyle</p>
                    </div>
                    <div class="bulleted">
                        <h4>Category:</h4>
                        <p class="gray">Dram</p>
                    </div>
                </div>
            </div>
        </div>
        <div>
            <img class="bookLight"
                 src="../assets/img/book3.jpg"
                 alt="The Dark Light Book cover" />
        </div>
    </div>
</div>
<!-- welcome to pages end -->
<!-- author`s books start -->
<div class="books-section">
    <div class="container">
        <h2 class="blue line-sm includes-text">Author’s Book Includes</h2>
        <div class="d-flex space-between books-section">
            <div class="swiper book-swiper">
                <div class="swiper-wrapper" >
                    @await Html.PartialAsync("_Book",Model.Books)
                </div>
            </div>
        </div>
    </div>
</div>
<!-- author`s books end -->
<!-- about author start -->
<div class="bg-light-blue">
    @await Html.PartialAsync("_Author",Model.Authors)
</div>
<!-- about author end -->
<!-- trusted by the best start -->
<div class="trusted d-flex">
    <div class="container">
        <h2 class="trusted-text blue">Trusted By The Best</h2>
        <div class="trusted-brands blue d-flex space-around align-center">
            <div class="swiper brand-swiper">
                <div class="swiper-wrapper">
                    @await Html.PartialAsync("_sponsor",Model.Sponsors)
                </div>
            </div>
        </div>
    </div>
</div>
<!-- trusted by the best end -->
<!-- get copy start -->
<div class="bg-blue white">
    <div class="get-copy container d-flex space-between align-center">
        <div class="get-copy-container">
            <h2 class="get-copy-text">Get Book Copy Today!</h2>
            <p class="gray">
                This the first true value generator on the Internet. It uses alphas
                dictionary of over 200 Latin words.
            </p>
            <button class="btn-no-bg-white"><a href="#">Order Today</a></button>
        </div>
        <div>
            <img class="magazine"
                 src="../assets/img/magazine.png "
                 alt="magazine and coffe cup image" />
        </div>
    </div>
</div>
<!-- get-copy end -->
<!-- what you`ll learn start -->
<div>
    <div class="container learn-cont">
        <h2 class="learn blue">What will you learn?</h2>
        <div class="subj-container d-flex space-between">
            <div class="subjects d-flex">
                <div class="subject-card bg-light-blue blue">
                    <h3 class="yellow-circle">01</h3>
                    <h5>
                        Use HDFS & Map Reduce for storing & analyzing data at scale.
                    </h5>
                </div>
                <div class="subject-card bg-light-blue blue">
                    <h3 class="yellow-circle">02</h3>
                    <h5>
                        Consume streaming data using Spark Streaming, Flink, and Storm.
                    </h5>
                </div>
                <div class="subject-card bg-light-blue blue">
                    <h3 class="yellow-circle">03</h3>
                    <h5>
                        Choose an appropriate data storage technology for your
                        application
                    </h5>
                </div>
                <div class="subject-card bg-light-blue blue">
                    <h3 class="yellow-circle">04</h3>
                    <h5>
                        Analyze non-relational data using HBase, Cassandra, and MongoDB.
                    </h5>
                </div>
            </div>
            <div class="learn-image">
                <img class="book-reader-img"
                     src="../assets/img/book-reader.jpg"
                     alt="woman reading the book" />
            </div>
        </div>
    </div>
</div>
<!-- what you`ll learn end -->
<!-- what readers say start -->
<div class="rating-section">
    <div class="d-flex container space-between blue reader-rating-cont">
        <div class="w-300">
            <h2 class="w-180 readers-say">What Readers Say About the Book</h2>
            <h4 class="gray readers-say-p">
                If you are going to use a passage of Lorem Ipsum, you need to be
                sure there isn't anything embarrassing hidden in the middle of text.
                All the Lorem Ipsum generators.
            </h4>

            <div class="circles d-flex align-center">
                <div class="small-circle"></div>
                <div class="small-circle"></div>
                <div class="small-circle"></div>
                <div class="small-circle"></div>
                <div class="small-circle"></div>
                <h5 class="blue">(4.8/5)</h5>
            </div>
            <h5 class="blue rating-text">Overall Customer Ratings</h5>
        </div>

        <div class="cards d-flex">
            <div class="readers-img-container cards d-flex center">
                <div class="swiper feedback-swiper">
                    <div class="swiper-wrapper">
                        @foreach (var comment in Model.Comments)
                        {
                            <div class="swiper-slide">
                                <div class="reader-card bg-blue">
                                    <div class="reader-img-header">
                                        <img src="~/assets/img/martin.png" alt="Martin png" />
                                        <div class="reader-card-header">
                                            <h2>@comment.AppUser.UserName</h2>
                                        </div>
                                    </div>
                                    <div class="reader-img-footer">
                                        <h2 class="message-title">@comment.Subject</h2>
                                        <p class="message">@comment.Body</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- what readers say end -->
<!-- aricles start -->
<div class="bg-light-blue articles blue">
    <div class="container d-flex align-center articles-container">
        <h3 class="article-text">Articles & Resources</h3>
        <div class="article-img-container d-flex">
            @await Html.PartialAsync("_Blog",Model.Blogs)
        </div>
    </div>
</div>
<!-- articles end -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



<script>
    const verifyEmail = document.querySelector("#verifyEmail");
    const successVerify = document.querySelector("#successVerify")
    const adminInfo = document.querySelector("#adminInfo");
    const emailFormat = document.querySelector("#emailFormat");
    if (verifyEmail != undefined) {
        const message1 = verifyEmail.innerHTML;
        if (message1 != "") {
            Swal.fire({
                title: `${message1}`,
                showClass: {
                    popup: 'animate__animated animate__fadeInDown'
                },
                hideClass: {
                    popup: 'animate__animated animate__fadeOutUp'
                }
            })
        }
    }
    if (successVerify != undefined) {
        const message = successVerify.innerHTML;
        if (message != "") {
            Swal.fire(
                `${message}`,
                'You clicked the button!',
                'success'
            )
        }
    }
    if (successVerify != undefined) {
        const message = successVerify.innerHTML;
        if (message != "") {
            Swal.fire(
                `${message}`,
                'You clicked the button!',
                'success'
            )
        }
    }
    if (adminInfo != undefined) {
        const message = adminInfo.innerHTML;
        if (message != "") {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: `${message}`,
            })
        }
    }
    if (emailFormat != undefined) {
        const message = emailFormat.innerHTML;
        if (message != "") {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: `${message}`,
            })
        }
    }



</script>